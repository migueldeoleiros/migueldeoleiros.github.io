<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Miguel López López</title><link>http://migueldeoleiros.github.io/posts/</link><description>Recent content in Posts on Miguel López López</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Mon, 18 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="http://migueldeoleiros.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Vim inspired apps to cover your workflow</title><link>http://migueldeoleiros.github.io/posts/vim-inspired-apps/</link><pubDate>Mon, 18 Apr 2022 00:00:00 +0000</pubDate><guid>http://migueldeoleiros.github.io/posts/vim-inspired-apps/</guid><description>As a Vim user it&amp;#39;s no surprise to find yourself using Vim commands where you shouldn&amp;#39;t, pressing ESC when you should have pressed Enter, and writhing gibberish like &amp;#34;jjjkkkjkjkj&amp;#34; when you try to scroll on some regular app.
Luckily because Vim has a huge community of mostly developers, you can find tons of plugins and apps that are designed with Vim keybinds in mind to make our life a little bit easier.</description><content type="html"><![CDATA[
<p>
As a Vim user it&#39;s no surprise to find yourself using Vim commands where you shouldn&#39;t, pressing ESC when you should have
pressed Enter, and writhing gibberish like &#34;jjjkkkjkjkj&#34; when you try to scroll on some regular app.</p>
<p>
Luckily because Vim has a huge community of mostly developers, you can find tons of plugins and apps that are designed
with Vim keybinds in mind to make our life a little bit easier.</p>
<p>
This are all <strong>Linux</strong> apps, although some of them may be available in other platforms as well.</p>
<div id="outline-container-headline-1" class="outline-2">
<h2 id="headline-1">
File manager
</h2>
<div id="outline-text-headline-1" class="outline-text-2">
<p>If you&#39;re using vim as your main editor you could of course use the built in file manager or just do everything by command
line, but for some tasks you may want something more powerful without giving up on the convenience of having
everything inside the console.</p>
<div id="outline-container-headline-2" class="outline-3">
<h3 id="headline-2">
Ranger
</h3>
<div id="outline-text-headline-2" class="outline-text-3">
<p>Ranger is a console file manager that provides a curses interface with a view o the hierarchy of directories.
It also give you a file preview for text, and optionally images, pdfs and videos. 
It not only has all the keybinds that you would expect, but also builds on them and provide some really usefully features
like bulk renaming. 
<a href="https://ranger.github.io/">https://ranger.github.io/</a></p>
<p>
<img src="/images/vim-apps/ranger.png" alt="/images/vim-apps/ranger.png" title="/images/vim-apps/ranger.png" /></p>
</div>
</div>
<div id="outline-container-headline-3" class="outline-3">
<h3 id="headline-3">
Vifm
</h3>
<div id="outline-text-headline-3" class="outline-text-3">
<p>Vifm provides a similar set of features as Ranger, but I would encourage people to try both to see which one you like
better.
Vifm is a little bit more true to the Vim way of doing things, and it&#39;s even configured with the same syntax.
<a href="https://github.com/vifm/vifm">https://github.com/vifm/vifm</a></p>
<p>
<img src="/images/vim-apps/vifm.gif" alt="/images/vim-apps/vifm.gif" title="/images/vim-apps/vifm.gif" /></p>
</div>
</div>
</div>
</div>
<div id="outline-container-headline-4" class="outline-2">
<h2 id="headline-4">
Web browser
</h2>
<div id="outline-text-headline-4" class="outline-text-2">
<p>Now a days you could live inside a browser, you got ChromeOS as an example.
And given that we are going to spend a lot of time on it, may as well customize it.
Luckily we got lot&#39;s of options to make your browser feel a bit more like Vim. The biggest selling point on this is allowing you
a keyboard driven navigation and using you mouse as less as possible.</p>
<div id="outline-container-headline-5" class="outline-3">
<h3 id="headline-5">
Qutebrowser
</h3>
<div id="outline-text-headline-5" class="outline-text-3">
<p>Qutebrowser is one of the many simplified Vim inspired browsers out there. It has a clean look and a intuitive way of navigating web pages with only your keyboard. It&#39;s also easy to customize and change colors and fonts.
The only drawback is the lack of plugin support, as you won&#39;t be able to use something like UBlockOrigin or fast
translation. It has support for greaseMonkey scripts and some basic adblock integration so if you like a fast and simple
experience you would most likely enjoy it.
<a href="https://qutebrowser.org/">https://qutebrowser.org/</a></p>
<p>
<img src="/images/vim-apps/qutebrowser.png" alt="/images/vim-apps/qutebrowser.png" title="/images/vim-apps/qutebrowser.png" />
if you don&#39;t like the default look, check out it&#39;s Dracula theme <a href="https://draculatheme.com/qutebrowser">https://draculatheme.com/qutebrowser</a></p>
</div>
</div>
<div id="outline-container-headline-6" class="outline-3">
<h3 id="headline-6">
Plugins for Firefox and Chrome
</h3>
<div id="outline-text-headline-6" class="outline-text-3">
<p>If you want a more complete browser experience, although this isn&#39;t as easy to customize as something like Qutebrowser.
You can get a lot of the functionalities on your regular browser like Firefox or Chrome.</p>
<p>
For <strong>Firefox</strong> you have <a href="https://github.com/ueokande/vim-vixen">Vim Vixen</a> 
For <strong>Chromium</strong> base browsers <a href="https://github.com/1995eaton/chromium-vim/">cVim</a></p>
<p>
This are just a couple of options that I&#39;ve used, but you&#39;ll find a handful more with a quick search.</p>
</div>
</div>
</div>
</div>
<div id="outline-container-headline-7" class="outline-2">
<h2 id="headline-7">
Zathura pdf viewer 
</h2>
<div id="outline-text-headline-7" class="outline-text-2">
<p>Zathura is a minimal looking document viewer with Vim like keybinds and a keyboard driven interface.
You won&#39;t be able to use it without installing plugins for your desired formats to read.
It supports not only pdf, but also PostScript, DjVu and Comic books.
You&#39;ll find more information on it&#39;s ArchWiki page <a href="https://wiki.archlinux.org/title/Zathura">here</a>. </p>
<p>
<a href="https://github.com/pwmt/zathura">https://github.com/pwmt/zathura</a></p>
</div>
</div>
<div id="outline-container-headline-8" class="outline-2">
<h2 id="headline-8">
Command line programs
</h2>
<div id="outline-text-headline-8" class="outline-text-2">
<p>If you are a Vim user chances are you also enjoy using the terminal for most of your work. This are some of the apps and
modifications I use that integrate well with a Vim workflow.</p>
<div id="outline-container-headline-9" class="outline-3">
<h3 id="headline-9">
Calcuse Calendar and todos
</h3>
<div id="outline-text-headline-9" class="outline-text-3">
<p>Calcurse is a calendar and scheduling application. If you use any todo list management tool or calendar, you know how
useful they can be to keep track of things. Calcurse allow you to have all that inside the terminal, and saves notes on plain
text that you can edit with Vim.
<a href="https://calcurse.org/">https://calcurse.org/</a></p>
<p>
<img src="/images/vim-apps/calcurse.gif" alt="/images/vim-apps/calcurse.gif" title="/images/vim-apps/calcurse.gif" /></p>
</div>
</div>
<div id="outline-container-headline-10" class="outline-3">
<h3 id="headline-10">
Vi-mode on bash and zsh
</h3>
<div id="outline-text-headline-10" class="outline-text-3">
<p>You may not know that you can enable Vi-mode on both the Bash and Zsh shell. this allow you to edit long commands a little easier. If you want to go a farther there are some Zsh plugins that improve this functionality.</p>
<p>
For <strong>Bash</strong> is as easy as adding &#34;<em>set -o vi</em>&#34; to your <em>.bashrc</em></p>
<p>
<strong>Zsh</strong> isn&#39;t any harder, you just need to add &#34;<em>bindkey -v</em>&#34; to your <em>.zshrc</em>
If you want a better Vi-mode you can check out this plugin: <a href="https://github.com/jeffreytse/zsh-vi-mode">https://github.com/jeffreytse/zsh-vi-mode</a></p>
</div>
</div>
<div id="outline-container-headline-11" class="outline-3">
<h3 id="headline-11">
Tmux
</h3>
<div id="outline-text-headline-11" class="outline-text-3">
<p>Tmux is a terminal multiplexer. It allows you to make windows and tabs inside the terminal and handling sessions.
It&#39;s session functionality is great when you&#39;re working on multiple things with Vim, as you can close one session and open
it latter without having to set up everything again. It has a lot more to offer that I wont be able to cover here, but you can
check out it&#39;s wiki <a href="https://github.com/tmux/tmux/wiki">https://github.com/tmux/tmux/wiki</a></p>
<p>
Tmux default keybinds are far from ideal, and nowhere close to Vim-like, but you can set up ones yourself and add plugins
to improve it. You can check out my <a href="https://github.com/migueldeoleiros/dotfiles/tree/master/.config/tmux">dotfiles</a> for inspiration.</p>
</div>
</div>
</div>
</div>
]]></content></item><item><title>Vim introduction, from basic to advance</title><link>http://migueldeoleiros.github.io/posts/vim-introduction/</link><pubDate>Sun, 17 Apr 2022 00:00:00 +0000</pubDate><guid>http://migueldeoleiros.github.io/posts/vim-introduction/</guid><description>What is Vim? According to the official website: &amp;#34;Vim is a highly configurable text editor built to make creating and changing any kind of text very efficient&amp;#34; So we know that Vim is a text editor that is designed with efficiency in mind, but what is the difference between Vim and any other editor? and why is it more efficient?
If you&amp;#39;ve never heard of vim before you are most likely used to the classic way of editing text, where you type characters with the keys to form words and you have some extra functions convincing the Ctr and Alt keys, like the classic Ctr-c and Ctr-v to copy and paste.</description><content type="html"><![CDATA[
<p><img src="/images/vim-introduction/vim-logo-png-transparent.png" alt="/images/vim-introduction/vim-logo-png-transparent.png" title="/images/vim-introduction/vim-logo-png-transparent.png" /></p>
<div id="outline-container-headline-1" class="outline-2">
<h2 id="headline-1">
What is Vim?
</h2>
<div id="outline-text-headline-1" class="outline-text-2">
<p>According to the official website:
<strong>&#34;Vim is a highly configurable text editor built to make creating and changing any kind of text very efficient&#34;</strong>
So we know that Vim is a text editor that is designed with efficiency in mind, but what is the difference between Vim and any other editor? and why is it more efficient?</p>
<p>
If you&#39;ve never heard of vim before you are most likely used to the classic way of editing text, where you type
characters with the keys to form words and you have some extra functions convincing the <strong>Ctr</strong> and <strong>Alt</strong> keys,
like the classic <strong>Ctr-c</strong> and <strong>Ctr-v</strong> to copy and paste. Vim uses a completely different paradigm called
<strong>Modal editing</strong> where you have different &#34;modes&#34; that change the function of each key. This can be a little
hard to understand at first so I advice to follow this article trying the commands at the same time on the editor.</p>
<p>
If you are using Linux you may have it already installed, in any other case you can install it using your OS repos or from <a href="https://www.vim.org/download.php">here</a>.</p>
</div>
</div>
<div id="outline-container-headline-2" class="outline-2">
<h2 id="headline-2">
Modes in Vim
</h2>
<div id="outline-text-headline-2" class="outline-text-2">
<p>As stated before, Vim uses a Modal editing approach where keys can change it&#39;s function depending on the mode that you&#39;re in.
There are 4 major modes, although you&#39;ll find that there are more variants in a bit.
This are:</p>
<ul>
<li>Normal mode</li>
<li>Insert mode</li>
<li>Visual mode</li>
<li>Command mode</li>
</ul>
</div>
</div>
<div id="outline-container-headline-3" class="outline-2">
<h2 id="headline-3">
Normal mode
</h2>
<div id="outline-text-headline-3" class="outline-text-2">
<p>This is the default mode that you&#39;ll be in when you open the editor, that&#39;s where the name comes from. You&#39;ll find that the
keys that usually work for characters aren&#39;t typing anything in this case, this is because in Normal mode each key represents a command.</p>
</div>
</div>
<div id="outline-container-headline-4" class="outline-2">
<h2 id="headline-4">
Movement commands
</h2>
<div id="outline-text-headline-4" class="outline-text-2">
<p>The very first commands that we are gonna learn are basic movements. One of the key functions of Vim is that
when using it you won&#39;t ever need to touch a mouse. You may be used to the arrow keys, and you can also use
them here, but when editing text quickly the best way to move around is with <strong>hjkl</strong>, let me explain:</p>
<p>
If you are a gamer you&#39;ll know the classic <strong>wasd</strong>, <strong>hjkl</strong> is the counterpart of that on your left hand, but
using only keys on the homerow to decrease movement, so <strong>h</strong> is left, <strong>j</strong> if up, <strong>k</strong> is down and <strong>l</strong> is right.
Now you can move the cursor one character at a time, but that isn&#39;t very efficient. To fix that Vim divides
the text in units, one unit could be a character, but it could also be a word or a line. </p>
<table>
<thead>
<tr>
<th>unit</th>
<th>jump to start</th>
<th>jump to finish</th>
</tr>
</thead>
<tbody>
<tr>
<td>word</td>
<td><strong>b</strong></td>
<td><strong>e</strong></td>
</tr>
</tbody>
<tbody>
<tr>
<td>line</td>
<td><strong>0</strong></td>
<td><strong>$</strong></td>
</tr>
</tbody>
<tbody>
<tr>
<td>paragraph</td>
<td><strong>}</strong></td>
<td><strong>}</strong></td>
</tr>
</tbody>
<tbody>
<tr>
<td>file</td>
<td><strong>gg</strong></td>
<td><strong>G</strong></td>
</tr>
</tbody>
</table>
<p>
This may look overcomplicated, and you wont use all of this keys at the start, but once we learn about combining
commands it&#39;ll make a lot more sense.</p>
</div>
</div>
<div id="outline-container-headline-5" class="outline-2">
<h2 id="headline-5">
Search
</h2>
<div id="outline-text-headline-5" class="outline-text-2">
<p>We can also move around the file using the search function, this is very similar to what you may be used to in other text
editors and applications with <strong>Ctr-f</strong>. In vim we use <strong>/</strong>, you&#39;ll see that when you press it, a line appears at the bottom of
the screen, where you can type the search.
If there is more than one match for your search and you want to see the other ones, after pressing <strong>Enter</strong> you can
move through them with <strong>n</strong> (forward)  and <strong>N</strong> (backwards).
Something nice about how the search function works in Vim is that you can move around and do your edits after
searching for something and as soon as you click <strong>n</strong> you&#39;ll be back at your last search.</p>
<p>
If you want to search text before the cursor instead of after, you could use <strong>?</strong> instead of <strong>/</strong> everything else would work
the same but backwards.</p>
</div>
</div>
<div id="outline-container-headline-6" class="outline-2">
<h2 id="headline-6">
Insert mode
</h2>
<div id="outline-text-headline-6" class="outline-text-2">
<p>Now that we know how to move around the text we need to learn how to write, which seems pretty obvious for a text editor.</p>
<p>
Insert mode is very similar of what you would find on a regular editor, and to get into it you just need to press <strong>i</strong> while
in normal mode. Now you can type whatever you want, use backspace to delete and even use the arrow keys to move,
although that isn&#39;t the most efficient, and you should probably go back to normal mode if you want to move the cursor.
But, how do we exit insert mode then? That&#39;s done with the <strong>ESC</strong> key, and if fact, is so commonly used that it&#39;s common
practice to rebind the <strong>Caps lock</strong> key to <strong>ESC</strong> to have it a little closer.</p>
<p>
Another way to enter insert mode is with pressing <strong>a</strong> in this case the cursor will be after the character instead of before.
You could also use the <strong>o</strong> command to create a new line at the same time you enter insert mode.</p>
</div>
</div>
<div id="outline-container-headline-7" class="outline-2">
<h2 id="headline-7">
Editing commands
</h2>
<div id="outline-text-headline-7" class="outline-text-2">
<p>On a text editor more than inserting text you&#39;ll probably spend more time editing what&#39;s already there, specially as a
developer. For the most basic edit, you can replace a character pressing <strong>r</strong> while on normal mode, but what you&#39;ll
probably what to use is the <strong>c</strong> as in <em>change</em> command. This is the first command that we learn that need to be combined
in order to work, if you only type <strong>c</strong> nothing will happen until you give another command. We&#39;ll learn about how to do this
in a minute, but for now you can try <strong>cw</strong> as in <em>change word</em> to replace the content of the current word. You&#39;ll notice that
you change to <em>insert mode</em>, so you&#39;ll need to use <strong>ESC</strong> to go back after replacing the content of the word.</p>
</div>
</div>
<div id="outline-container-headline-8" class="outline-2">
<h2 id="headline-8">
Copy, paste and delete
</h2>
<div id="outline-text-headline-8" class="outline-text-2">
<p>We&#39;re all familiar with <strong>Ctr-c</strong> and <strong>Ctr-v</strong>, but you&#39;ll quickly realize how fast and easy you can copy and paste text with
Vim. Copy is called <em>yank</em> and the command for that is <strong>y</strong>, paste is a little more intuitive, the command is <strong>p</strong>, for cutting
text we&#39;ll use <strong>d</strong> as in delete. In Vim, every time you delete text it&#39;s saved in a register, so you can paste it afterwards,
that&#39;s why there isn&#39;t a &#34;cut&#34; command.</p>
<p>
If you try them you&#39;ll probably noticed that both yank and delete commands work in a similar way to the <strong>c</strong> <em>change</em> command, but
we&#39;ll see another way of combining them this time. You can repeat the command to use it in a line, so <strong>yy</strong> yanks a
line, and  <strong>dd</strong> deletes it, now you can paste them with <strong>p</strong>.</p>
<p>
Unless you want to move everything one line at a time you probably want a better way to select text, this is where <em>visual mode</em> comes handy.</p>
</div>
</div>
<div id="outline-container-headline-9" class="outline-2">
<h2 id="headline-9">
Visual mode
</h2>
<div id="outline-text-headline-9" class="outline-text-2">
<p>To enter <em>visual mode</em> type <strong>v</strong> while in <em>normal mode</em>. You can use all the movement commands that we learned earlier
and you&#39;ll see that the selection follows the cursor starting from where it was first. Other than movement you can use
some commands like <strong>y</strong> <em>yank</em>, <strong>d</strong> delete and <strong>c</strong> <em>change</em> and those will be executed on the selection.</p>
<p>
There are also two other variants of visual mode that you&#39;ll find very useful, this are: <em>Visual Line</em> and <em>Visual Block</em> modes.</p>
<p>
To enter <em>Visual Line mode</em> the command is uppercase <strong>V</strong>, this selects the text divided in lines. Notice that if you have line
wrap activated you may see more than one line while it&#39;s only one real one, so vim will interpret it as such.</p>
<p>
To enter <em>Visual Block</em> the command is <strong>Ctr-v</strong>, this selects text in a block. It&#39;s a great feature, as it allow you to select
text vertically as well as horizontally.</p>
</div>
</div>
<div id="outline-container-headline-10" class="outline-2">
<h2 id="headline-10">
Command mode
</h2>
<div id="outline-text-headline-10" class="outline-text-2">
<p>There is only one mode left to present, and we haven&#39;t learned how to save and exit Vim yet.
To get into <em>Command Mode</em> press <strong>:</strong>, you&#39;ll notice that you can now write in a line similar to what we do for searching, but when you press <strong>Enter</strong> whatever you wrote will be executed.</p>
<p>
This are the commands that you&#39;ll want to use more often:</p>
<table>
<tbody>
<tr>
<td>:help d</td>
<td>show help for command &#34;d&#34;</td>
</tr>
</tbody>
<tbody>
<tr>
<td>:w</td>
<td>write file</td>
</tr>
</tbody>
<tbody>
<tr>
<td>:w foo</td>
<td>write on file called &#34;foo&#34;</td>
</tr>
</tbody>
<tbody>
<tr>
<td>:q</td>
<td>quit vim</td>
</tr>
</tbody>
<tbody>
<tr>
<td>:q!</td>
<td>quit vim without saving</td>
</tr>
</tbody>
<tbody>
<tr>
<td>:wq</td>
<td>write file and quit vim</td>
</tr>
</tbody>
<tbody>
<tr>
<td>:e foo</td>
<td>open file called &#34;foo&#34;</td>
</tr>
</tbody>
<tbody>
<tr>
<td>:!ls</td>
<td>execute ls command on system shell</td>
</tr>
</tbody>
<tbody>
<tr>
<td>:r !ls</td>
<td>read output of ls command and insert it</td>
</tr>
</tbody>
</table>
</div>
</div>
<div id="outline-container-headline-11" class="outline-2">
<h2 id="headline-11">
VIM grammar
</h2>
<div id="outline-text-headline-11" class="outline-text-2">
<p>Yes, Vim has grammar, and it probably is one of the most interesting parts about it, but if you didn&#39;t like English at school
don&#39;t worry, you can also see this as a sort of programming language.
To understand this, we&#39;ll divide Vim commands in 3 groups: Verbs, Modifiers and Nouns.</p>
<div id="outline-container-headline-12" class="outline-3">
<h3 id="headline-12">
Verbs
</h3>
<div id="outline-text-headline-12" class="outline-text-3">
<table>
<tbody>
<tr>
<td><strong>x</strong></td>
<td>delete character under cursor</td>
</tr>
</tbody>
<tbody>
<tr>
<td><strong>r</strong></td>
<td>replace character under cursor</td>
</tr>
</tbody>
<tbody>
<tr>
<td><strong>c</strong></td>
<td>change</td>
</tr>
</tbody>
<tbody>
<tr>
<td><strong>y</strong></td>
<td>yank (copy)</td>
</tr>
</tbody>
<tbody>
<tr>
<td><strong>d</strong></td>
<td>delete</td>
</tr>
</tbody>
<tbody>
<tr>
<td><strong>p</strong></td>
<td>paste</td>
</tr>
</tbody>
<tbody>
<tr>
<td><strong>v</strong></td>
<td>visually select</td>
</tr>
</tbody>
</table>
</div>
</div>
<div id="outline-container-headline-13" class="outline-3">
<h3 id="headline-13">
Modifiers
</h3>
<div id="outline-text-headline-13" class="outline-text-3">
<table>
<tbody>
<tr>
<td><strong>i</strong></td>
<td>inside</td>
</tr>
</tbody>
<tbody>
<tr>
<td><strong>a</strong></td>
<td>around</td>
</tr>
</tbody>
<tbody>
<tr>
<td>NUM</td>
<td>any number (0,1,2..)</td>
</tr>
</tbody>
<tbody>
<tr>
<td><strong>t</strong></td>
<td>searches for something and stops before it (to –)</td>
</tr>
</tbody>
<tbody>
<tr>
<td><strong>f</strong></td>
<td>searches for something and lands on it (find)</td>
</tr>
</tbody>
<tbody>
<tr>
<td><strong>/</strong></td>
<td>find a string</td>
</tr>
</tbody>
</table>
</div>
</div>
<div id="outline-container-headline-14" class="outline-3">
<h3 id="headline-14">
Noun
</h3>
<div id="outline-text-headline-14" class="outline-text-3">
<table>
<tbody>
<tr>
<td><strong>w</strong></td>
<td>start of next word</td>
</tr>
</tbody>
<tbody>
<tr>
<td><strong>b</strong></td>
<td>start of previous word (before)</td>
</tr>
</tbody>
<tbody>
<tr>
<td><strong>e</strong></td>
<td>end of word</td>
</tr>
</tbody>
<tbody>
<tr>
<td><strong>s</strong></td>
<td>sentence</td>
</tr>
</tbody>
<tbody>
<tr>
<td><strong>p</strong></td>
<td>paragraph</td>
</tr>
</tbody>
<tbody>
<tr>
<td><strong>t</strong></td>
<td>tag (HTML)</td>
</tr>
</tbody>
<tbody>
<tr>
<td><strong>b</strong></td>
<td>code block</td>
</tr>
</tbody>
<tbody>
<tr>
<td><strong>h,j,k,l</strong></td>
<td>left, down, up, right</td>
</tr>
</tbody>
<tbody>
<tr>
<td><strong>$</strong></td>
<td>end of line</td>
</tr>
</tbody>
<tbody>
<tr>
<td><strong>0</strong></td>
<td>start of line</td>
</tr>
</tbody>
</table>
</div>
</div>
<div id="outline-container-headline-15" class="outline-3">
<h3 id="headline-15">
Make Sentences
</h3>
<div id="outline-text-headline-15" class="outline-text-3">
<p>Now that we know the parts to form a sentence let&#39;s make our first basic ones. You can use the number modifier with
any command to repeat it set number of times. For example <strong>2w</strong> will move the cursor two words instead of one.
Now with a verb, <strong>d2w</strong> will delete the current and next word. I&#39;m sure you are getting how this works, here you have some other examples:</p>
<ul>
<li><strong>vap</strong> Visually select this paragraph (<em>visual around paragraph</em>)</li>
<li><strong>ci&#34;</strong> Change text inside quotes</li>
<li><strong>ca&#34;</strong> Change text around quotes (includes quotes)</li>
<li><strong>dt,</strong> Delete text until the next coma on the current line </li>
<li><strong>dj</strong> Delete this and the line below</li>
<li><strong>d/something</strong> Delete text until the next search that matches &#34;something&#34; </li>
</ul>
</div>
</div>
</div>
</div>
<div id="outline-container-headline-16" class="outline-2">
<h2 id="headline-16">
The &#34;dot&#34; or repeat command
</h2>
<div id="outline-text-headline-16" class="outline-text-2">
<p>You can repeat the last command by pressing <strong>.</strong>, for example is you execute <strong>ciwhello&lt;ESC&gt;</strong> this will replace the word
you&#39;re over with hello. If you then move to a different word and press <strong>.</strong> that last command will be repeated and the word
would also be changed to &#34;hello&#34;. you can do this as many times as you want as long as you don&#39;t use any other command
in between. The <em>dot</em> command can also be used with the number modifier, that way <strong>3.</strong> will be the same as <strong>…</strong>. </p>
</div>
</div>
<div id="outline-container-headline-17" class="outline-2">
<h2 id="headline-17">
Macros
</h2>
<div id="outline-text-headline-17" class="outline-text-2">
<p>Macros are a little bit like an overpowered <em>dot</em> command, They allow us to record any number of commands and repeat
them at will later.
You may have noticed that the <em>dot</em> command only repeats the commands that modifies the text, it wont repeat the
movement commands, macros don&#39;t have that limitation, and we&#39;ll see how that can be very usefully.</p>
<p>
To record a macro you need to press <strong>q</strong> followed by any letter, that letter will be where the macro will be recorded. Then you execute the serie of commands that you want to record and press <strong>q</strong> again.</p>
<p>
To execute said macro you press <strong>@</strong> followed by the letter that you used before. You can also repeat the last executed
macro with <strong>@@</strong> as <strong>.@</strong> would only repeat the last command inside the macro.</p>
<p>
A very common example where I like to use macros is when editing a list of items, let&#39;s make a simple one to add &#34;;&#34; at the end of each line.</p>
<p>
We are gonna use the register &#34;a&#34; but you could save this anywhere, so to start <strong>qa</strong> now to append &#34;;&#34; to the end of the
line we could do <strong>$a;&lt;ESC&gt;</strong> but we can shorten <strong>$a</strong> as just <strong>A</strong> (for adding something at the beginning you could also
use <strong>I</strong> instead of <strong>0i</strong>). Now we want to be on the next line to make it easier to execute the macro again, so <strong>j</strong> and lastly
<strong>q</strong> to finish the macro. Adding all this together it would be <strong>qaA;&lt;ESC&gt;jq</strong>
And to execute this you could do <strong>@a</strong>, maybe you have 10 lines to add a semicolon, so you could got to the first one and do <strong>10@a</strong>.</p>
<p>
If you wanted to repeat this with every line in a file the fastest way to do that is with recursion, in this case with
<strong>qaA;&lt;ESC&gt;j@aq</strong> the macro would call itself until there are no more lines. Note that for recursion to work you need to
save the macro in a clean register, to clean the register &#34;a&#34; you can execute <strong>qaq</strong>.</p>
</div>
</div>
<div id="outline-container-headline-18" class="outline-2">
<h2 id="headline-18">
Search and replace
</h2>
<div id="outline-text-headline-18" class="outline-text-2">
<p>The search and replace function in Vim is done through a command on <em>Command Mode</em>, that allows us to have a lot of
control over it.
The way you&#39;re probably going to use the most is this: <strong>:%s/bad/good/g</strong> this would change all words &#34;bad&#34; to &#34;good&#34; in the file.
It already seems pretty easy to use, but if wee want to have a bit more control we can divide it in parts:
<strong>:[range] s[ubstitute]/pattern/string/[flags] [count]</strong>
where the parameters between brackets are optional</p>
<div id="outline-container-headline-19" class="outline-3">
<h3 id="headline-19">
range
</h3>
<div id="outline-text-headline-19" class="outline-text-3">
<p>On our first example the range was &#34;%&#34;, that defines the whole file, but we can also omit it to execute the same thing
on just one line. in a similar way you could do <strong>:1,10s/bad/good/g</strong> to execute the command in lines one to ten.
while defining ranges you can use the next table and it&#39;s combinations:</p>
<table>
<tbody>
<tr>
<td>.</td>
<td>current line</td>
</tr>
</tbody>
<tbody>
<tr>
<td>1</td>
<td>first line</td>
</tr>
</tbody>
<tbody>
<tr>
<td>$</td>
<td>last line</td>
</tr>
</tbody>
<tbody>
<tr>
<td>%</td>
<td>all lines</td>
</tr>
</tbody>
<tbody>
<tr>
<td>.+1</td>
<td>line after current</td>
</tr>
</tbody>
<tbody>
<tr>
<td>1,10</td>
<td>range between 1 and 10</td>
</tr>
</tbody>
</table>
</div>
</div>
<div id="outline-container-headline-20" class="outline-3">
<h3 id="headline-20">
flags
</h3>
<div id="outline-text-headline-20" class="outline-text-3">
<p>Flags can be combined as well, and aren&#39;t required.
Using the previous example you can add a confirmation with the flag &#34;c&#34; <strong>:$s/bad/good/gc</strong></p>
<table>
<tbody>
<tr>
<td>g</td>
<td>replace all</td>
</tr>
</tbody>
<tbody>
<tr>
<td>c</td>
<td>ask for confirmation</td>
</tr>
</tbody>
<tbody>
<tr>
<td>i</td>
<td>ignore case for the pattern</td>
</tr>
</tbody>
<tbody>
<tr>
<td>I</td>
<td>don&#39;t ignore case for the pattern</td>
</tr>
</tbody>
</table>
</div>
</div>
<div id="outline-container-headline-21" class="outline-3">
<h3 id="headline-21">
Regular expressions 
</h3>
<div id="outline-text-headline-21" class="outline-text-3">
<p>You can use regular expressions inside the commands, this gives us a lot of flexibility.
Notice that to use regex you need to add &#34;\&#34; before the expressions so they aren&#39;t counted as regular text
Here are some examples:</p>
<p>
<strong>:$s/\(bad\|good\)/great/g</strong> This would replace any instance of &#34;bad&#34; or &#34;good&#34; with &#34;great&#34;</p>
<p>
<strong>:$s/\&lt;good\&gt;/bad/g</strong> This would replace only good as a whole word</p>
</div>
</div>
</div>
</div>
<div id="outline-container-headline-22" class="outline-2">
<h2 id="headline-22">
The global command
</h2>
<div id="outline-text-headline-22" class="outline-text-2">
<p>The global command can also be quite useful, and if you understand how to use <em>substitute</em> it is very similar.
The syntax is: <strong>:[range]g/pattern/command</strong>
Where <strong>pattern</strong> is what we are looking to match in the file and <strong>command</strong> is what we want to execute for
each line matching the pattern.
As an example we can run <strong>:g/error/d</strong> to execute the command <strong>d</strong> <em>delete</em> on every line that contains the word
&#34;error&#34;.
We could also run <strong>:g!/error/d</strong> to invert the search, this time deleting every line that doesn&#39;t contain &#34;error&#34;.</p>
<p>
You can also execute a substitute command inside a global command like in <strong>:g/bad/s/good/great/g</strong> where
it runs the command <strong>s/good/great/g</strong> for every line containing the word &#34;bad&#34;</p>
<p>
Note that although in this examples <strong>d</strong> is both a normal mode command and a command mode command,
you can only execute command mode commands with the global command. That said, you can use the normal
prefix to execute a normal mode command like in this example: <strong>:g/something/normal @a</strong> where we execute
the macro in register &#34;a&#34; for every line containing &#34;something&#34;.</p>
</div>
</div>
<div id="outline-container-headline-23" class="outline-2">
<h2 id="headline-23">
Undo, redo and time-travel
</h2>
<div id="outline-text-headline-23" class="outline-text-2">
<p>Vim undo and redo functions works for the most part as you would expect, you can press <strong>u</strong> in normal mode to
undo the last action and <strong>Ctr-r</strong> to redo it. You can also use <strong>u</strong> with a number modifier like <strong>3u</strong> to undo 3 steps.</p>
<p>
You may be thinking &#34;what&#39;s up with time-traveling and what does it have to do with Vim?&#34;. Well, Vim allow you to
move back and forward on your file edits not only one by one, but also by time intervals, here are some examples:</p>
<table>
<tbody>
<tr>
<td>:earlier 10m</td>
<td>undo changes in last 10 minutes</td>
</tr>
</tbody>
<tbody>
<tr>
<td>:ea 2d</td>
<td>undo changes in last 2 days</td>
</tr>
</tbody>
<tbody>
<tr>
<td>:later 10m</td>
<td>redo changes in last 10 minutes</td>
</tr>
</tbody>
<tbody>
<tr>
<td>:lat 10s</td>
<td>redo changes in last 10 seconds</td>
</tr>
</tbody>
<tbody>
<tr>
<td>:ea 3f</td>
<td>undo changes in last 3 file writes</td>
</tr>
</tbody>
</table>
</div>
</div>
<div id="outline-container-headline-24" class="outline-2">
<h2 id="headline-24">
Registers
</h2>
<div id="outline-text-headline-24" class="outline-text-2">
<p>We touched on registers while talking about macros and also while talking about the yank(copy) and delete commands. 
You&#39;ll soon realize that a lot of commands are related to them.</p>
<p>
A register is something like a clipboard or a container where you store text. You can access any register by using a double
quote before its name, for example for register <em>a</em> with <em>&#34;a</em>.
You can add and print text from a register with the yank and paste commands. To add text to <em>a</em> use <strong>&#34;ay</strong> and to print it
<strong>&#34;ap</strong>.</p>
<p>
To see the content of all the used registers you can use to command <strong>:reg</strong> or <strong>:register</strong>, you&#39;ll notice that there
are quite a lot of things going on.</p>
<div id="outline-container-headline-25" class="outline-3">
<h3 id="headline-25">
Yank, delete and numbered registers
</h3>
<div id="outline-text-headline-25" class="outline-text-3">
<p>You may have noticed when we talked about copy and deleting text that if you copy something and then delete some
text, when you go to paste it, you would have the deleted text instead of what you copied. This can be solved thanks to registers.</p>
<p>
Every time you copy or delete something this would go to the <strong>&#34;</strong> register, which is the default when pasting (<strong>&#34;&#34;p</strong> is the same as <strong>p</strong>), but only yanking text gets saved on the <strong>0</strong> register by default.
You could access the last copied text with <strong>&#34;0p</strong> even after deleting something after.</p>
<p>
Both deleted and yanked text gets saved in order in the other number registers, so the last
yanked text is on <strong>1</strong>, the previous one is on <strong>2</strong>, the one before in <strong>3</strong> and so on.</p>
</div>
</div>
<div id="outline-container-headline-26" class="outline-3">
<h3 id="headline-26">
Read only registers and search register
</h3>
<div id="outline-text-headline-26" class="outline-text-3">
<p>There are 4 read only registers, where the next information is saved:</p>
<table>
<tbody>
<tr>
<td><strong>.</strong></td>
<td>last inserted text</td>
</tr>
</tbody>
<tbody>
<tr>
<td><strong>%</strong></td>
<td>current file path</td>
</tr>
</tbody>
<tbody>
<tr>
<td><strong>:</strong></td>
<td>last executed command</td>
</tr>
</tbody>
<tbody>
<tr>
<td><strong>#</strong></td>
<td>last edited file</td>
</tr>
</tbody>
</table>
<p>
This isn&#39;t read only, but the last text you search will end up on the <strong>/</strong> register, as expected.</p>
</div>
</div>
<div id="outline-container-headline-27" class="outline-3">
<h3 id="headline-27">
Alphabetic registers and macros
</h3>
<div id="outline-text-headline-27" class="outline-text-3">
<p>You may have realized already that macros are just strings of text saved on a register, and the <strong>@</strong> executes whatever is
inside of them, you could save anything inside of those registers and even record macros without executing them before.
With the command <strong>:let</strong> you can enter text directly inside a register like <strong>:let @a=&#39;hello&#39;</strong>.</p>
<p>
Note that registers <strong>a</strong> and <strong>A</strong> are the same, but if you write on register <strong>A</strong> you&#39;ll be appending text to <strong>a</strong> instead of
overwriting it. </p>
</div>
</div>
</div>
</div>
<div id="outline-container-headline-28" class="outline-2">
<h2 id="headline-28">
Splits
</h2>
<div id="outline-text-headline-28" class="outline-text-2">
<p>If you use a terminal that allows splits you could open another instance of Vim on a split and be over with it, but 
using Vim&#39;s built in splits allows you to share registers and copy text from one file to another without much trouble.</p>
<p>
This are the main commands that you need to know:</p>
<table>
<tbody>
<tr>
<td><strong>Ctr-w v</strong></td>
<td>make a vertical split</td>
</tr>
</tbody>
<tbody>
<tr>
<td><strong>Ctr-w s</strong></td>
<td>make a horizontal split</td>
</tr>
</tbody>
<tbody>
<tr>
<td><strong>Ctr-w h</strong></td>
<td>move to the split to the left</td>
</tr>
</tbody>
<tbody>
<tr>
<td><strong>Ctr-w j</strong></td>
<td>move to the split below</td>
</tr>
</tbody>
<tbody>
<tr>
<td><strong>Ctr-w k</strong></td>
<td>move to the split above</td>
</tr>
</tbody>
<tbody>
<tr>
<td><strong>Ctr-w l</strong></td>
<td>move to the split to the right</td>
</tr>
</tbody>
<tbody>
<tr>
<td><strong>Ctr-w c</strong></td>
<td>close (remove) split</td>
</tr>
</tbody>
</table>
</div>
</div>
<div id="outline-container-headline-29" class="outline-2">
<h2 id="headline-29">
Basic config
</h2>
<div id="outline-text-headline-29" class="outline-text-2">
<p>Now that we&#39;ve touched on most of the important parts of vim you probably want to change the default look and feel.
You can do so on a file called <em>.vimrc</em> on your home directory.</p>
<p>
This are the most basic things that I feel are a must on any configuration:</p>
<p>
You can comment any lines that you don&#39;t want with a single <strong>&#34;</strong> at the start.
To learn more about this options you can use <strong>:help</strong> <em>option</em></p>
<div class="src src-text">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>syntax enable                           &#34; Enables syntax highlighing
</span></span><span style="display:flex;"><span>set hidden                              &#34; Required to keep multiple buffers open multiple buffers
</span></span><span style="display:flex;"><span>set nowrap                              &#34; Display long lines as just one line
</span></span><span style="display:flex;"><span>set autoindent                          &#34; Autoindent
</span></span><span style="display:flex;"><span>set wildmenu                            &#34; Better completion
</span></span><span style="display:flex;"><span>set encoding=utf-8                      &#34; The encoding displayed
</span></span><span style="display:flex;"><span>set pumheight=10                        &#34; Makes popup menu smaller
</span></span><span style="display:flex;"><span>set fileencoding=utf-8                  &#34; The encoding written to file
</span></span><span style="display:flex;"><span>set ruler                	    	      &#34; Show the cursor position all the time
</span></span><span style="display:flex;"><span>set cmdheight=1                         &#34; More space for displaying messages
</span></span><span style="display:flex;"><span>set iskeyword+=-                        &#34; treat dash separated words as a word text object&#34;
</span></span><span style="display:flex;"><span>set mouse=a                             &#34; Enable your mouse
</span></span><span style="display:flex;"><span>set splitbelow                          &#34; Horizontal splits will automatically be below
</span></span><span style="display:flex;"><span>set splitright                          &#34; Vertical splits will automatically be to the right
</span></span><span style="display:flex;"><span>set t_Co=256                            &#34; Support 256 colors
</span></span><span style="display:flex;"><span>set conceallevel=0                      &#34; So that you can see `` in markdown files
</span></span><span style="display:flex;"><span>set tabstop=4                           &#34; Insert 4 spaces for a tab
</span></span><span style="display:flex;"><span>set smarttab
</span></span><span style="display:flex;"><span>set ttyfast                             &#34; improve smoothness
</span></span><span style="display:flex;"><span>set incsearch                           &#34; Search as you type
</span></span><span style="display:flex;"><span>set shiftwidth=4                        &#34; Change the number of space characters inserted for indentation
</span></span><span style="display:flex;"><span>set smartindent                         &#34; Makes indenting smart
</span></span><span style="display:flex;"><span>set autoindent                          &#34; Good auto indent
</span></span><span style="display:flex;"><span>set number                              &#34; Line numbers
</span></span><span style="display:flex;"><span>&#34; set cursorline                          &#34; Enable highlighting of the current line
</span></span><span style="display:flex;"><span>&#34; set showtabline=2                       &#34; Always show tabs
</span></span><span style="display:flex;"><span>set laststatus=2                        &#34; Always display statusline 
</span></span><span style="display:flex;"><span>set showcmd
</span></span><span style="display:flex;"><span>set ignorecase                          &#34; Case insensitive search
</span></span><span style="display:flex;"><span>set smartcase                           &#34; Overide ignorecase if the search includes upercase
</span></span><span style="display:flex;"><span>set timeoutlen=1000 ttimeoutlen=0       &#34; Remove timeout when exiting insert mode
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>&#34; Change cursor shape for modes
</span></span><span style="display:flex;"><span>let &amp;t_SI.=&#34;\e[5 q&#34; &#34;SI = INSERT mode
</span></span><span style="display:flex;"><span>let &amp;t_SR.=&#34;\e[4 q&#34; &#34;SR = REPLACE mode
</span></span><span style="display:flex;"><span>let &amp;t_EI.=&#34;\e[1 q&#34; &#34;EI = NORMAL mode (ELSE)</span></span></code></pre></div>
</div>
</div>
</div>
<div id="outline-container-headline-30" class="outline-2">
<h2 id="headline-30">
Set up custom keybinds
</h2>
<div id="outline-text-headline-30" class="outline-text-2">
<p>If you keep using Vim as your main editor you&#39;ll end up wanting to change some keybinds or create new ones with macros
that you use often. Luckily that is really easy to do following this syntax in your <em>.vimrc</em> :
<strong>map_mode &lt;what_you_type&gt; &lt;what_is_executed&gt;</strong></p>
<p>
For <strong>map_mode</strong> you can use: </p>
<table>
<tbody>
<tr>
<td>nnoremap</td>
<td>map keys in normal mode.</td>
</tr>
</tbody>
<tbody>
<tr>
<td>inoremap</td>
<td>map keys in insert mode.</td>
</tr>
</tbody>
<tbody>
<tr>
<td>vnoremap</td>
<td>map keys in visual mode.</td>
</tr>
</tbody>
</table>
<p>
Here is a useful example for remapping the window resize commands in normal mode:</p>
<div class="src src-text">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>&#34; Resize split windows using arrow keys by pressing:
</span></span><span style="display:flex;"><span>&#34; CTRL+UP, CTRL+DOWN, CTRL+LEFT, or CTRL+RIGHT.
</span></span><span style="display:flex;"><span>noremap &lt;c-up&gt; &lt;c-w&gt;+
</span></span><span style="display:flex;"><span>noremap &lt;c-down&gt; &lt;c-w&gt;-
</span></span><span style="display:flex;"><span>noremap &lt;c-left&gt; &lt;c-w&gt;&gt;
</span></span><span style="display:flex;"><span>noremap &lt;c-right&gt; &lt;c-w&gt;&lt;</span></span></code></pre></div>
</div>
</div>
</div>
<div id="outline-container-headline-31" class="outline-2">
<h2 id="headline-31">
Change theme
</h2>
<div id="outline-text-headline-31" class="outline-text-2">
<p>The default look and feel of Vim can be outdated, but just because it&#39;s a command line program doesn&#39;t mean it need to
look like this.</p>
<p>
We are going to add a colorscheme to make it look a bit more modern.
For that we are going to follow the instruction on <a href="https://github.com/joshdick/onedark.vim">https://github.com/joshdick/onedark.vim</a> to install the one dark
theme inspired on the Atom text editor. And add this line to our <em>.vimrc</em></p>
<div class="src src-text">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>colorscheme onedark</span></span></code></pre></div>
</div>
<p>
If you want you background to be the same as the terminal you can also add this <strong>before</strong> the previous line: </p>
<div class="src src-text">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>&#34;transparency with onedark theme
</span></span><span style="display:flex;"><span>if (has(&#34;autocmd&#34;) &amp;&amp; !has(&#34;gui_running&#34;))
</span></span><span style="display:flex;"><span>  augroup colorset
</span></span><span style="display:flex;"><span>    autocmd!
</span></span><span style="display:flex;"><span>    let s:white = { &#34;gui&#34;: &#34;#ABB2BF&#34;, &#34;cterm&#34;: &#34;145&#34;, &#34;cterm16&#34; : &#34;7&#34; }
</span></span><span style="display:flex;"><span>    autocmd ColorScheme * call onedark#set_highlight(&#34;Normal&#34;, { &#34;fg&#34;: s:white }) &#34; `bg` will not be styled since there is no `bg` setting
</span></span><span style="display:flex;"><span>  augroup END
</span></span><span style="display:flex;"><span>endif</span></span></code></pre></div>
</div>
</div>
</div>
<div id="outline-container-headline-32" class="outline-2">
<h2 id="headline-32">
More plugins
</h2>
<div id="outline-text-headline-32" class="outline-text-2">
<p>Because Vim has been around for a long time and has a very active community you can find a lot of interesting plugins.</p>
<p>
Following the theme we are going to install a new modeline that looks more modern and goes well with the colorscheme.</p>
<p>
You could use a plugin manager like <a href="https://github.com/junegunn/vim-plug">vim-plug</a>, but Vim now manages packages itself, so I&#39;m going to show you how to do that.</p>
<p>
For the modeline we are going to use <a href="https://github.com/itchyny/lightline.vim">https://github.com/itchyny/lightline.vim</a>
if we follow the instructions for <em>Vim packages</em> you only need to clone the repo inside <strong>~/.vim/pack/plugins/start/lightline</strong></p>
<p>
Because we are using a theme that is compatible with lightline, we can also add this to match the colors:</p>
<div class="src src-text">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>let g:lightline = {
</span></span><span style="display:flex;"><span>      \ &#39;colorscheme&#39;: &#39;onedark&#39;,
</span></span><span style="display:flex;"><span>      \ }</span></span></code></pre></div>
</div>
<p>
And because the new modeline includes a current mode indicator que can add this to hide the plain text one:</p>
<div class="src src-text">
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>set noshowmode                          &#34; We don&#39;t need to see things like -- INSERT -- anymore</span></span></code></pre></div>
</div>
</div>
</div>
]]></content></item></channel></rss>